{"version":3,"file":"stick-it.min.js","sources":["../src/helpers.js","../src/stick-it.js"],"sourcesContent":["/**\n * Throttles a function so it is only called once within the specified time window.\n * This prevents performance issues from running a function repeatedly during scroll or resize events.\n *\n * @since 1.0.0\n * @param {Function} func - The function to throttle.\n * @param {number} wait - The number of milliseconds to wait before allowing another call.\n * @returns {Function} A throttled version of the provided function.\n */\nexport function throttle(func, wait) {\n  let context, args, result, timeout = null\n  let previous = 0\n\n  const later = () => {\n    previous = Date.now()\n    timeout = null\n    result = func.apply(context, args)\n    context = args = null\n  }\n\n  return function(...innerArgs) {\n    const now = Date.now()\n    const remaining = wait - (now - previous)\n    context = this\n    args = innerArgs\n\n    if (remaining <= 0) {\n      clearTimeout(timeout)\n      timeout = null\n      previous = now\n      result = func.apply(context, args)\n      context = args = null\n    } else if (!timeout) {\n      timeout = setTimeout(later, remaining)\n    }\n    return result\n  }\n}\n\n/**\n * Retrieves the current vertical scroll position of the page.\n *\n * @returns {number} The current vertical scroll position in pixels.\n */\nexport function getScrollY() {\n  // Prefer window.scrollY for modern browsers.\n  // If scrollY is undefined, fallback to scrollTop for legacy browsers.\n  return (typeof window.scrollY === 'number')\n        ? window.scrollY\n        : (document.documentElement || document.body.parentNode || document.body).scrollTop\n}\n\n/**\n * Calculates the vertical position of an element relative to the top of the document.\n *\n * @param {HTMLElement} elem - The element whose position should be determined.\n * @param {string} side - Which side of the element to use for calculation ('top' or 'bottom').\n * @returns {number} The element's vertical position in pixels.\n */\nexport function getElementYPosition(elem, side) {\n  let pos = 0\n  const elemHeight = elem.offsetHeight\n\n  let currentElem = elem\n  while (currentElem) {\n    pos += currentElem.offsetTop\n    currentElem = currentElem.offsetParent\n  }\n\n  if (side === 'bottom') {\n    pos += elemHeight\n  }\n\n  return pos\n}\n","import { throttle, getScrollY, getElementYPosition } from './helpers.js'\n\n/**\n * @typedef {Object} StickItClasses\n * @property {string} clone CSS class applied to the cloned element.\n * @property {string} stick CSS class applied when the element is stuck.\n * @property {string} unstick CSS class applied when the element is unstuck.\n */\n\n/**\n * @typedef {Object} StickItOptions\n * @property {number|string} offset - Numeric offset (in px) or a CSS selector string indicating when the element should \"stick\".\n * @property {string} offsetSide - Side of the element used for calculating offset ('top' or 'bottom').\n * @property {StickItClasses} classes - CSS classes used for styling the cloned/stuck elements.\n * @property {number} throttle - Throttle delay in ms for scroll and resize events.\n * @property {Function} onInit - Callback fired after initialization.\n * @property {Function} onStick - Callback fired when the element becomes stuck.\n * @property {Function} onUnstick - Callback fired when the element becomes unstuck.\n * @property {Function} onDestroy - Callback fired after destroying the instance.\n */\n\n/**\n * StickIt\n *\n * Description:\n * StickIt is a utility that clones a specified element and \"sticks\" it\n * to the top of the viewport once the user scrolls past a certain threshold (offset).\n * This can be used to create sticky headers or navigation bars that remain visible as the user scrolls.\n *\n * This project is a custom modernized version of headhesive.js by Mark Goodyear.\n *\n * @version 1.1.0\n * @author Chayson Media Group\n * @license MIT\n *\n * Original Project:\n * Headhesive.js by Mark Goodyear\n * @see https://github.com/markgoodyear/headhesive.js\n *\n * Modernized and adapted by Chayson Media Group\n * @see https://chayson.com/\n */\nexport default class StickIt {\n  /**\n   * Creates a new StickIt instance.\n   * @param {HTMLElement|string} elem - The target element (or a selector string) to make sticky.\n   * @param {Partial<StickItOptions>} [options={}] - Custom configuration options.\n   */\n  constructor(elem, options = {}) {\n    if (!('querySelector' in document && 'addEventListener' in window)) {\n      // Feature test fails, do not initialize.\n      return\n    }\n\n    /**\n     * @type {boolean} visible - Indicates whether the cloned element is currently stuck.\n     */\n    this.visible = false\n\n    /**\n     * @type {StickItOptions} options - Merged configuration options.\n     */\n    this.options = Object.assign({\n      offset: 300,\n      offsetSide: 'top',\n      classes: {\n        clone: 'stickit',\n        stick: 'stickit-stick',\n        unstick: 'stickit-unstick'\n      },\n      throttle: 250,\n      onInit: () => {},\n      onStick: () => {},\n      onUnstick: () => {},\n      onDestroy: () => {}\n    }, options)\n\n    /**\n     * @type {HTMLElement} elem - The target element to stick.\n     */\n    this.elem = (typeof elem === 'string') ? document.querySelector(elem) : elem\n\n    // Proceed with initialization only if elem exists.\n    if (this.elem) {\n      this.init()\n    }\n  }\n\n  /**\n   * Initializes the StickIt instance:\n   * - Clones the target element and inserts it into the DOM.\n   * - Calculates the scroll offset threshold.\n   * - Sets up scroll and resize event listeners with throttling.\n   * - Calls the onInit callback.\n   */\n  init() {\n    // Clone the element and add the clone class(es).\n    this.clonedElem = this.elem.cloneNode(true)\n\n    const cloneClasses = Array.isArray(this.options.classes.clone)\n      ? this.options.classes.clone\n      : [this.options.classes.clone]\n\n    cloneClasses.forEach(cls => this.clonedElem.classList.add(cls))\n\n    document.body.insertBefore(this.clonedElem, document.body.firstChild)\n\n    // Determine the initial scroll offset.\n    this._setScrollOffset()\n\n    // Bind and throttle update methods.\n    this._throttledUpdate = throttle(this.update.bind(this), this.options.throttle)\n    this._throttledScrollOffset = throttle(this._setScrollOffset.bind(this), this.options.throttle)\n\n    // Listen to scroll and resize events.\n    window.addEventListener('scroll', this._throttledUpdate, false)\n    window.addEventListener('resize', this._throttledScrollOffset, false)\n\n    // Call the init callback.\n    this.options.onInit.call(this)\n  }\n\n  /**\n   * Calculates and sets the scroll offset at which the element should become stuck.\n   * If the offset is a number, it uses that directly.\n   * If the offset is a string (selector), it finds that element and calculates its position.\n   * @private\n   */\n  _setScrollOffset() {\n    const { offset, offsetSide } = this.options\n    if (typeof offset === 'number') {\n      this.scrollOffset = offset\n    } else if (typeof offset === 'string') {\n      const target = document.querySelector(offset)\n      if (target) {\n        this.scrollOffset = getElementYPosition(target, offsetSide)\n      } else {\n        this.scrollOffset = 300 // Default fallback if the selector isn't found.\n      }\n    } else {\n      throw new Error(`Invalid offset: ${offset}`)\n    }\n  }\n\n  /**\n   * Destroys the StickIt instance:\n   * - Removes the cloned element from the DOM.\n   * - Removes scroll and resize event listeners.\n   * - Calls the onDestroy callback.\n   */\n  destroy() {\n    if (this.clonedElem && this.clonedElem.parentNode) {\n      document.body.removeChild(this.clonedElem)\n    }\n    window.removeEventListener('scroll', this._throttledUpdate)\n    window.removeEventListener('resize', this._throttledScrollOffset)\n\n    this.options.onDestroy.call(this)\n  }\n\n  /**\n   * Makes the element \"stick\" by adding the sticky class and removing any unstick class.\n   * Also sets the visible state to true and calls the onStick callback.\n   */\n  stick() {\n    if (!this.visible) {\n      this.clonedElem.classList.remove(this.options.classes.unstick)\n      this.clonedElem.classList.add(this.options.classes.stick)\n      this.visible = true\n      this.options.onStick.call(this)\n    }\n  }\n\n  /**\n   * Makes the element \"unstick\" by adding the unstick class and removing the stick class.\n   * Also sets the visible state to false and calls the onUnstick callback.\n   */\n  unstick() {\n    if (this.visible) {\n      this.clonedElem.classList.remove(this.options.classes.stick)\n      this.clonedElem.classList.add(this.options.classes.unstick)\n      this.visible = false\n      this.options.onUnstick.call(this)\n    }\n  }\n\n  /**\n   * Checks the current scroll position and decides whether the element should\n   * stick or unstick.\n   */\n  update() {\n    if (getScrollY() > this.scrollOffset) {\n      this.stick()\n    } else {\n      this.unstick()\n    }\n  }\n}\n"],"names":["throttle","func","wait","context","args","result","timeout","previous","later","Date","now","apply","innerArgs","remaining","this","clearTimeout","setTimeout","constructor","elem","options","document","window","visible","Object","assign","offset","offsetSide","classes","clone","stick","unstick","onInit","onStick","onUnstick","onDestroy","querySelector","init","clonedElem","cloneNode","Array","isArray","forEach","cls","classList","add","body","insertBefore","firstChild","_setScrollOffset","_throttledUpdate","update","bind","_throttledScrollOffset","addEventListener","call","scrollOffset","Error","target","side","pos","elemHeight","offsetHeight","currentElem","offsetTop","offsetParent","getElementYPosition","destroy","parentNode","removeChild","removeEventListener","remove","scrollY","documentElement","scrollTop"],"mappings":"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"}